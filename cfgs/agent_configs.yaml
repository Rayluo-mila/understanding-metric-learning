agents:
  ### Base settings
  baseline:
    class_path: agents.sac_aux_agent.SACAuxAgent

  bisim:
    class_path: agents.bisim_agent_sac.BisimAgent

  base-deepmdp:
    class_path: agents.deepmdp_agent.DeepMDPAgent

  ### Section 5.1: benchmarking settings (same as original GitHub repos)
  sac:                         # Vanilla SAC agent
    class_path: agents.base_agent.SACAgent
    decoder_type: "identity"

  deepmdp:
    # https://github.com/facebookresearch/deep_bisim4control/blob/main/agent/deepmdp_agent.py
    class_path: agents.deepmdp_agent.DeepMDPAgent
    transition_model_type: "probabilistic"
    decoder_type: "identity"

  dbc:
    # https://github.com/facebookresearch/deep_bisim4control/tree/main
    class_path: agents.bisim_agent_sac.BisimAgent
    transition_model_type: "probabilistic"
    bisim_dist: "huber_mean"
    r_dist: "huber"
    prob_dist: "L2_mean"
    metric_loss_type: "L2"
    encoder_max_norm: false

  dbcnormed:
    # https://github.com/metekemertas/RobustBisimulation/tree/main
    # Note: using "huber_mean" for z_dist and z'_dist can require max_norm scaled by feature_dim;
    # here, we retain the original configuration without that scaling.
    class_path: agents.bisim_agent_sac.BisimAgent
    transition_model_type: "probabilistic"
    bisim_dist: "huber_mean"
    r_dist: "huber"
    prob_dist: "huber_mean"
    metric_loss_type: "L2"
    encoder_max_norm: true

  simsr:
    # https://github.com/bit1029public/SimSR/blob/main/simsr_sac.py
    class_path: agents.mico_agent_sac.MICoAgent
    encoder_post_processing: "l2_norm"
    transition_model_type: "probabilistic"
    bisim_dist: "simsr"
    r_dist: "L1"
    rp: false
    metric_loss_type: "huber"

  mico:
    # https://github.com/google-research/google-research/blob/.../mico/atari/metric_dqn_agent.py
    class_path: agents.mico_agent_sac.MICoAgent
    bisim_dist: "mico"
    r_dist: "L1"
    rp: false
    zp: false
    use_target_encoder: true
    metric_loss_type: "huber"

  rap:
    # https://github.com/jianda-chen/RAP_distance
    class_path: agents.rap_agent_sac.RAPAgent
    transition_model_type: "probabilistic"
    bisim_dist: "mico"
    r_dist: "rap"
    prob_dist: "L2_mean"
    mico_beta: 1e-6
    rzp_coef: 1e-4
    state_reward_decoder_loss_coef: 0.5
    actor_lr: 5e-4
    critic_lr: 5e-4
    encoder_lr: 5e-4
    encoder_feature_dim: 100

  ### Section 5.2: case studies
  simsr-basic:
    # SimSR (Basic)
    class_path: agents.mico_agent_sac.MICoAgent
    encoder_post_processing: "l2_norm"
    transition_model_type: "probabilistic"
    bisim_dist: "simsr_basic"
    r_dist: "L1"
    rp: false
    metric_loss_type: "huber"

  simsr-basic-nozp:
    # SimSR (Basic, No ZP)
    class_path: agents.mico_agent_sac.MICoAgent
    encoder_post_processing: "l2_norm"
    bisim_dist: "simsr_basic"
    r_dist: "L1"
    rp: false
    zp: false
    metric_loss_type: "huber"

  simsr-withrp:
    # SimSR (with RP)
    class_path: agents.mico_agent_sac.MICoAgent
    encoder_post_processing: "l2_norm"
    transition_model_type: "probabilistic"
    bisim_dist: "simsr"
    r_dist: "L1"
    metric_loss_type: "huber"

  dbcnormed-huber-target:
    class_path: agents.bisim_agent_sac.BisimAgent
    transition_model_type: "probabilistic"
    bisim_dist: "huber_mean"
    r_dist: "huber"
    prob_dist: "huber_mean"
    encoder_max_norm: true
    use_target_encoder: true
    metric_loss_type: "huber"

  dbcnormed-huber:
    class_path: agents.bisim_agent_sac.BisimAgent
    transition_model_type: "probabilistic"
    bisim_dist: "huber_mean"
    r_dist: "huber"
    prob_dist: "huber_mean"
    encoder_max_norm: true
    metric_loss_type: "huber"

  dbcnormed-target:
    class_path: agents.bisim_agent_sac.BisimAgent
    transition_model_type: "probabilistic"
    bisim_dist: "huber_mean"
    r_dist: "huber"
    prob_dist: "huber_mean"
    encoder_max_norm: true
    use_target_encoder: true

  ### Section 5.3: isolated settings
  sac-isolated-metric-dbc:
    class_path: agents.isolated_metric_agent.IsolatedMetricSACAgent
    encoder_max_norm: false
    encoder_max_norm_metric: false
    transition_model_type: "probabilistic"
    bisim_dist: "huber_mean"
    r_dist: "huber"
    metric_loss_type: "L2"
    bisim_coef: 0.5

  sac-isolated-metric-dbcnormed:
    class_path: agents.isolated_metric_agent.IsolatedMetricSACAgent
    encoder_max_norm: false
    encoder_max_norm_metric: true
    transition_model_type: "probabilistic"
    bisim_dist: "huber_mean"
    r_dist: "huber"
    prob_dist: "huber_mean"
    metric_loss_type: "L2"
    bisim_coef: 0.5

  sac-isolated-metric-mico:
    class_path: agents.isolated_metric_agent.IsolatedMetricSACAgent
    bisim_dist: "mico"
    r_dist: "L1"
    use_target_encoder: true
    metric_loss_type: "huber"

  sac-isolated-metric-simsr:
    class_path: agents.isolated_metric_agent.IsolatedMetricSACAgent
    encoder_post_processing_metric: "l2_norm"
    bisim_dist: "simsr"
    r_dist: "L1"
    metric_loss_type: "huber"

  ### Experimental settings (not included in the paper)
  deepmdp-l2normed:
    # DeepMDP with L2 normalization in the representation space
    class_path: agents.deepmdp_agent.DeepMDPAgent
    encoder_post_processing: "l2_norm"
    transition_model_type: "probabilistic"
    decoder_type: "identity"

  simsr-ens:
    # https://github.com/bit1029public/SimSR/blob/main/simsr_sac.py
    class_path: agents.mico_agent_sac.MICoAgent
    encoder_post_processing: "l2_norm"
    transition_model_type: "ensemble_v2"
    bisim_dist: "simsr"
    r_dist: "L1"
    rp: false
    metric_loss_type: "huber"

  dbcnormed-detachrz:
    # https://github.com/metekemertas/RobustBisimulation/tree/main
    # Note: using "huber_mean" for z_dist and z'_dist can require max_norm scaled by feature_dim;
    # here, we retain the original configuration without that scaling.
    class_path: agents.bisim_agent_sac.BisimAgent
    transition_model_type: "probabilistic"
    rp_detach_encoder: true
    zp_detach_encoder: true
    bisim_dist: "huber_mean"
    r_dist: "huber"
    prob_dist: "huber_mean"
    metric_loss_type: "L2"
    encoder_max_norm: true

  sac-op:
    # SAC agent with next observation prediction auxiliary loss
    class_path: agents.sac_aux_agent.SACAuxAgent
    decoder_type: "pixel"

  dbcnormed-sum:
    # A "fixed" version of DBC-normed
    class_path: agents.bisim_agent_sac.BisimAgent
    transition_model_type: "probabilistic"
    bisim_dist: "huber"
    r_dist: "huber"
    prob_dist: "huber"
    metric_loss_type: "L2"
    encoder_max_norm: true
